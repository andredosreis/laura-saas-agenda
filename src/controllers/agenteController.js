// src/controllers/agenteController.js

const { DateTime } = require('luxon');
const Agendamento = require('../models/Agendamento');
const Cliente = require('../models/Cliente');
const Conversa = require('../models/Conversa');
const Pacote = require('../models/Pacote');
const { sendWhatsAppMessage } = require('../utils/zapi_client');
const { classificarIntencaoCliente, gerarRespostaLaura } = require('../utils/openaiHelper');

console.log('CONTROLLER: Carregando agenteController.js');

/**
 * L√ìGICA PRINCIPAL - Passo 3 do Plano de A√ß√£o
 * Procura agendamentos para o dia seguinte e envia lembretes personalizados.
 */
const enviarLembretes24h = async (req, res) => {
  console.log('AGENTE: Iniciando tarefa de enviar lembretes de 24h...');
  try {
    // 1. Calcular o intervalo de tempo para "amanh√£"
    const inicioDeAmanha = DateTime.now().setZone('Europe/Lisbon').plus({ days: 1 }).startOf('day').toJSDate();
    const fimDeAmanha = DateTime.now().setZone('Europe/Lisbon').plus({ days: 1 }).endOf('day').toJSDate();

    // 2. Buscar agendamentos que precisam de lembrete
    const agendamentosParaLembrar = await Agendamento.find({
      dataHora: { $gte: inicioDeAmanha, $lte: fimDeAmanha },
      status: { $in: ['Agendado', 'Confirmado'] },
    }).populate('cliente pacote');

    if (agendamentosParaLembrar.length === 0) {
      console.log('AGENTE: Nenhum agendamento para lembrar amanh√£.');
      return res.status(200).json({ message: 'Nenhum agendamento para lembrar amanh√£.' });
    }

    // 3. Enviar as mensagens
    const resultados = [];
    for (const ag of agendamentosParaLembrar) {
      if (ag.cliente && ag.cliente.telefone) {
        const nomeDoServico = ag.pacote?.nome || ag.servicoAvulsoNome || 'o seu atendimento';
        const horaFormatada = DateTime.fromJSDate(ag.dataHora, { zone: 'Europe/Lisbon' }).toFormat('HH:mm');
        
        const mensagem = `Ol√° ${ag.cliente.nome}! Este √© um lembrete da sua sess√£o de "${nomeDoServico}" agendada para amanh√£ √†s ${horaFormatada}. Por favor, responda com "Sim" para confirmar.`;
        
        await sendWhatsAppMessage(ag.cliente.telefone, mensagem);
        resultados.push({ cliente: ag.cliente.nome, status: 'Lembrete enviado' });
      }
    }

    console.log(`AGENTE: Lembretes de 24h enviados para ${resultados.length} clientes.`);
    res.status(200).json({
      success: true,
      message: `Lembretes enviados para ${resultados.length} agendamentos.`,
      detalhes: resultados,
    });

  } catch (error) {
    console.error('AGENTE: Erro ao enviar lembretes de 24h:', error);
    res.status(500).json({ success: false, message: 'Ocorreu um erro no servidor do agente.' });
  }
};

/**
 * MVP - Processa resposta do cliente via webhook com IA
 */
const processarRespostaWhatsapp = async (req, res) => {
    try {
       const telefoneCliente = req.body.telefoneCliente || req.body.phone;
       const mensagem = req.body.mensagem || req.body.text?.message;

      console.log(`AGENTE: Mensagem recebida de ${telefoneCliente}: "${mensagem}"`);

        // 1. Identificar o cliente
        const cliente = await Cliente.findOne({ telefone: telefoneCliente });
        
        if (!cliente) {
            // FLUXO PARA CLIENTES NOVOS
            await processarClienteNovo(telefoneCliente, mensagem);
            return res.status(200).json({ status: 'Processando cliente novo' });
        }

        // 2. FLUXO PARA CLIENTES EXISTENTES COM IA
        console.log(`AGENTE: Cliente encontrado: ${cliente.nome}`);
        
        // Buscar agendamentos pr√≥ximos do cliente
        const agendamentosProximos = await buscarAgendamentosProximos(cliente._id);

        // 3. Analisar inten√ß√£o da mensagem com IA
        const intencao = await analisarIntencaoComIA(mensagem);

        // 4. Processar baseado na inten√ß√£o
        await processarIntencaoComIA(cliente, agendamentosProximos, intencao, mensagem);

        res.status(200).json({ 
            status: 'Mensagem processada com sucesso',
            cliente: cliente.nome,
            intencao: intencao
        });

    } catch (error) {
        console.error('AGENTE: Erro ao processar resposta WhatsApp:', error);
        res.status(500).json({ success: false, message: 'Erro interno do agente' });
    }
};

/**
 * Analisa inten√ß√£o da mensagem usando OpenAI
 */
async function analisarIntencaoComIA(mensagem) {
    try {
        const intencao = await classificarIntencaoCliente(mensagem);
        console.log(`AGENTE: Inten√ß√£o classificada pela IA: ${intencao}`);
        return intencao.toLowerCase();
    } catch (error) {
        console.error('AGENTE: Erro ao classificar inten√ß√£o com IA:', error);
        // Fallback para an√°lise manual se a IA falhar
        return analisarIntencaoManual(mensagem);
    }
}

/**
 * Processa a a√ß√£o baseada na inten√ß√£o (com IA)
 */
async function processarIntencaoComIA(cliente, agendamentos, intencao, mensagemOriginal) {
    console.log(`AGENTE: Processando inten√ß√£o "${intencao}" para cliente ${cliente.nome}`);
    
    switch (intencao) {
        case 'confirmar':
            await processarConfirmacao(cliente, agendamentos);
            break;
        
        case 'cancelar':
            await processarCancelamento(cliente, agendamentos);
            break;
        
        case 'remarcar':
            await processarReagendamento(cliente, agendamentos);
            break;
        
        case 'pergunta':
        case 'outro':
            // Usa a IA para gerar resposta personalizada
            await processarComIA(cliente, mensagemOriginal);
            break;
        
        default:
            await processarNaoIdentificado(cliente, mensagemOriginal);
            break;
    }
}

/**
 * Usa a IA para gerar resposta personalizada
 */
async function processarComIA(cliente, mensagemOriginal) {
    try {
        console.log(`AGENTE: Gerando resposta com IA para ${cliente.nome}`);
        const respostaIA = await gerarRespostaLaura(mensagemOriginal, cliente.nome);
        console.log(`AGENTE: Resposta gerada pela IA: ${respostaIA}`);
        await sendWhatsAppMessage(cliente.telefone, respostaIA);
    } catch (error) {
        console.error('AGENTE: Erro ao gerar resposta com IA:', error);
        // Fallback para resposta padr√£o
        await processarNaoIdentificado(cliente, mensagemOriginal);
    }
}

/**
 * Processa clientes novos (n√£o cadastrados)
 */
async function processarClienteNovo(telefoneCliente, mensagem) {
    let conversa = await Conversa.findOne({ telefone: telefoneCliente });

    if (!conversa) {
        // Primeira intera√ß√£o: pede o nome
        await sendWhatsAppMessage(telefoneCliente, 
            "Vejo que voc√™ ainda n√£o √© nossa cliente üòä. Eu sou a assistente da Laura e estou aqui para tirar qualquer d√∫vida e marcar uma sess√£o de teste. Para melhor te atender, poderia me dizer seu nome?");
        await Conversa.create({ telefone: telefoneCliente, estado: 'aguardando_nome' });
        return;
    }

    if (conversa.estado === 'aguardando_nome') {
        // Recebeu o nome, salva temporariamente e pergunta sobre objetivo/dor
        const nome = mensagem.trim().split(' ')[0]; // Pega s√≥ o primeiro nome para soar mais natural
        conversa.nomeTemporario = nome;
        conversa.estado = 'aguardando_objetivo';
        await conversa.save();

        await sendWhatsAppMessage(telefoneCliente, 
            `Prazer, ${nome}! Agora me conta: qual seu principal objetivo ou d√∫vida em rela√ß√£o √† est√©tica? Assim posso te explicar nossos servi√ßos e te ajudar a escolher o melhor para voc√™! üíï`);
        return;
    }

    if (conversa.estado === 'aguardando_objetivo') {
        // Recebeu o objetivo/dor, apresenta os servi√ßos
        const nome = conversa.nomeTemporario || 'querida';
        // Busca os servi√ßos do banco (model Pacote)
        const pacotes = await Pacote.find({});
        
        if (pacotes.length === 0) {
            await sendWhatsAppMessage(telefoneCliente, 
                `${nome}, no momento estou organizando nossa lista de servi√ßos. Vou encaminhar sua mensagem para a Laura, que entrar√° em contato com todos os detalhes! üíï`);
            return;
        }

        let listaServicos = pacotes.map((p, i) => `${i + 1}. ${p.nome}`).join('\n');
        await sendWhatsAppMessage(telefoneCliente, 
            `Entendi, ${nome}! Olha s√≥, temos esses servi√ßos que podem te ajudar:\n\n${listaServicos}\n\nMe fala o n√∫mero ou nome do servi√ßo que voc√™ quer saber mais! üòä`);
        conversa.estado = 'aguardando_escolha_servico';
        await conversa.save();
        return;
    }

    if (conversa.estado === 'aguardando_escolha_servico') {
        // Cliente escolheu um servi√ßo, explica o servi√ßo
        const nome = conversa.nomeTemporario || 'querida';
        const pacotes = await Pacote.find({});
        const escolha = mensagem.trim().toLowerCase();

        // Tenta identificar o servi√ßo pelo n√∫mero ou nome
        let pacoteEscolhido = null;
        if (!isNaN(escolha)) {
            const idx = parseInt(escolha, 10) - 1;
            if (pacotes[idx]) pacoteEscolhido = pacotes[idx];
        } else {
            pacoteEscolhido = pacotes.find(p => 
                p.nome.toLowerCase().includes(escolha) || 
                escolha.includes(p.nome.toLowerCase())
            );
        }

        if (pacoteEscolhido) {
            const explicacao = pacoteEscolhido.descricao || 
                `O servi√ßo "${pacoteEscolhido.nome}" √© um dos nossos mais procurados!`;
            
            await sendWhatsAppMessage(telefoneCliente, 
                `√ìtima escolha, ${nome}! üòç\n\n"${pacoteEscolhido.nome}"\n${explicacao}\n\nSe quiser agendar uma sess√£o de teste ou saber mais sobre outros servi√ßos, √© s√≥ me avisar! Estou aqui para te ajudar üíï`);
            
            // Cria o cliente no banco de dados
            await Cliente.create({ 
                nome: conversa.nomeTemporario, 
                telefone: telefoneCliente,
                observacoes: `Interessada em: ${pacoteEscolhido.nome}`
            });
            
            conversa.estado = 'finalizado';
            await conversa.save();
        } else {
            await sendWhatsAppMessage(telefoneCliente, 
                `N√£o consegui identificar o servi√ßo, ${nome}. Pode me dizer o n√∫mero ou nome certinho? Ou se preferir, posso te passar para a Laura! üòä`);
        }
        return;
    }
}

/**
 * Busca agendamentos pr√≥ximos do cliente (pr√≥ximos 7 dias)
 */
async function buscarAgendamentosProximos(clienteId) {
    const hoje = new Date();
    const proximosSete = new Date();
    proximosSete.setDate(hoje.getDate() + 7);

    return await Agendamento.find({
        cliente: clienteId,
        dataHora: { $gte: hoje, $lte: proximosSete },
        status: { $in: ['Agendado', 'Confirmado'] }
    }).populate('pacote');
}

/**
 * Analisa inten√ß√£o da mensagem (fallback manual)
 */
function analisarIntencaoManual(mensagem) {
    const msg = mensagem.toLowerCase().trim();

    // Confirma√ß√£o
    if (msg.includes('sim') || msg.includes('confirmo') || msg.includes('confirmar') || 
        msg.includes('ok') || msg.includes('certo') || msg.includes('perfeito')) {
        return 'confirmar';
    }

    // Cancelamento
    if (msg.includes('cancelar') || msg.includes('n√£o vou') || msg.includes('nao vou') || 
        msg.includes('desmarcar') || msg.includes('n√£o posso') || msg.includes('nao posso') ||
        msg.includes('n√£o consigo') || msg.includes('nao consigo')) {
        return 'cancelar';
    }

    // Reagendamento
    if (msg.includes('remarcar') || msg.includes('mudar') || msg.includes('outro dia') || 
        msg.includes('outro hor√°rio') || msg.includes('outro horario') || msg.includes('reagendar')) {
        return 'remarcar';
    }

    // D√∫vidas
    if (msg.includes('d√∫vida') || msg.includes('duvida') || msg.includes('pergunta') || 
        msg.includes('?') || msg.includes('como') || msg.includes('quando') || msg.includes('onde') ||
        msg.includes('quanto') || msg.includes('pre√ßo') || msg.includes('preco') || msg.includes('valor')) {
        return 'pergunta';
    }

    // N√£o identificado
    return 'outro';
}

/**
 * Processa confirma√ß√£o de agendamento
 */
async function processarConfirmacao(cliente, agendamentos) {
    if (agendamentos.length === 0) {
        const mensagem = `Ol√° ${cliente.nome}! üòä

N√£o encontrei nenhum agendamento pr√≥ximo para confirmar. Se voc√™ tem algum agendamento marcado, vou encaminhar para a Laura verificar.

Qualquer coisa, estou aqui! üíï`;
        
        await sendWhatsAppMessage(cliente.telefone, mensagem);
        return;
    }

    // Confirma o primeiro agendamento encontrado
    const agendamento = agendamentos[0];
    agendamento.status = 'Confirmado';
    await agendamento.save();

    const dataFormatada = DateTime.fromJSDate(agendamento.dataHora, { zone: 'Europe/Lisbon' })
        .toFormat('dd/MM/yyyy \'√†s\' HH:mm');
    const servico = agendamento.pacote?.nome || agendamento.servicoAvulsoNome || 'seu atendimento';

    const mensagem = `Perfeito, ${cliente.nome}! ‚úÖ

Seu agendamento est√° confirmado:
üìÖ ${servico}
üïê ${dataFormatada}

Nos vemos em breve! Se precisar de algo, √© s√≥ chamar üíï`;

    await sendWhatsAppMessage(cliente.telefone, mensagem);
}

/**
 * Processa cancelamento de agendamento
 */
async function processarCancelamento(cliente, agendamentos) {
    if (agendamentos.length === 0) {
        const mensagem = `Ol√° ${cliente.nome}! üòä

N√£o encontrei agendamentos pr√≥ximos para cancelar. Vou encaminhar sua mensagem para a Laura verificar.

Qualquer coisa, estou aqui! üíï`;
        
        await sendWhatsAppMessage(cliente.telefone, mensagem);
        return;
    }

    const agendamento = agendamentos[0];
    agendamento.status = 'Cancelado';
    await agendamento.save();

    const mensagem = `Entendido, ${cliente.nome}! 

Seu agendamento foi cancelado conforme solicitado. 

Se quiser reagendar para outro dia, √© s√≥ me avisar! Estou aqui para ajudar üíï`;

    await sendWhatsAppMessage(cliente.telefone, mensagem);
}

/**
 * Processa solicita√ß√£o de reagendamento
 */
async function processarReagendamento(cliente, agendamentos) {
    const mensagem = `Ol√° ${cliente.nome}! üòä

Entendi que voc√™ gostaria de remarcar seu agendamento. Vou encaminhar sua solicita√ß√£o para a Laura, que entrar√° em contato para verificar a disponibilidade de novos hor√°rios.

Ela tem a agenda toda na cabe√ßa! üíï`;

    await sendWhatsAppMessage(cliente.telefone, mensagem);
}

/**
 * Processa mensagens n√£o identificadas
 */
async function processarNaoIdentificado(cliente, mensagemOriginal) {
    const mensagem = `Ol√° ${cliente.nome}! üòä

Recebi sua mensagem, mas n√£o consegui entender exatamente como posso ajudar. Vou encaminhar para a Laura, que entrar√° em contato em breve.

Ela sempre sabe o que fazer! üíï`;

    await sendWhatsAppMessage(cliente.telefone, mensagem);
}

module.exports = {
  enviarLembretes24h,
  processarRespostaWhatsapp,
};