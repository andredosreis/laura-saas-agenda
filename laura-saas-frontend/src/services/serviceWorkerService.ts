// ============================================
// SERVICE WORKER SERVICE - LAURA SAAS
// ============================================
// Respons√°vel por:
// 1. Registar o Service Worker
// 2. Verificar atualiza√ß√µes periodicamente
// 3. Gerenciar ciclo de vida do SW
// ============================================

// ============================================
// 1Ô∏è‚É£ REGISTAR SERVICE WORKER
// ============================================
// Esta fun√ß√£o registra o SW quando o app inicia
// Ela avisa o navegador: "Hey, temos um Service Worker em public/service-worker.ts"
// Retorna: ServiceWorkerContainer se bem-sucedido, null se falhar


export async function registerServiceWorker(): Promise<ServiceWorkerRegistration | null>{
  // ‚ùå Se o navegador n√£o suporta SW (ex: navegadores muito antigos), sair
  if (!navigator.serviceWorker) {
    console.warn('[SW] ‚ùå Service Worker n√£o suportado neste navegador');
    return null;
  }

  try {
    // ‚úÖ Registar o SW
    // Caminho: '/service-worker.js' (gerado automaticamente pelo Vite do arquivo .ts)
    // scope: '/' = SW controla todo o site
    const registration = await navigator.serviceWorker.register('/service-worker.js', {
      scope: '/',
    });
    
    console.log('[SW] ‚úÖ Registrado com sucesso');
    console.log('[SW] SW Controller ativo:', registration.active);
    
    return registration;
  } catch (error) {
    console.error('[SW] ‚ùå Erro ao registar:', error);
    return null;
  }
}

// ============================================
// 2Ô∏è‚É£ VERIFICAR ATUALIZA√á√ïES PERIODICAMENTE
// ============================================
// Esta fun√ß√£o verifica se h√° nova vers√£o do SW a cada intervalo
// Devolve uma callback quando detecta uma atualiza√ß√£o
// Exemplo: quando algu√©m faz push do novo c√≥digo para produ√ß√£o

export function checkForUpdates(
  // Callback: o que fazer quando h√° update dispon√≠vel
  onUpdateAvailable: () => void,
  // Intervalo em minutos (padr√£o: 60 = 1 hora)
  intervalMinutes: number = 60
): () => void {
  // ‚ùå Se SW n√£o est√° ativo, n√£o faz sentido verificar
  if (!navigator.serviceWorker?.controller) {
    console.warn('[SW] ‚ö†Ô∏è SW controller n√£o ativo, pulando verifica√ß√£o de updates');
    return () => {};
  }

  console.log(`[SW] üîÑ Iniciando verifica√ß√£o de updates a cada ${intervalMinutes} minutos`);

  // 1Ô∏è‚É£ Verificar IMEDIATAMENTE
  navigator.serviceWorker.controller.postMessage({ type: 'CHECK_UPDATE' });

  // 2Ô∏è‚É£ Depois verificar a cada X minutos
  // Exemplo: Se 60 minutos = 60 * 60 * 1000 = 3.600.000 ms
  const interval = setInterval(() => {
    console.log('[SW] üîÑ Verificando updates...');
    navigator.serviceWorker.controller?.postMessage({ type: 'CHECK_UPDATE' });
  }, intervalMinutes * 60 * 1000);

  // 3Ô∏è‚É£ Listener para quando h√° UPDATE dispon√≠vel
  // Quando SW muda de "waiting" para "active", √© porque h√° nova vers√£o
  const updateListener = () => {
    console.log('[SW] üì¶ Update detectado! Chamando callback...');
    onUpdateAvailable();
  };

  navigator.serviceWorker.addEventListener('controllerchange', updateListener);

  // 4Ô∏è‚É£ Retornar fun√ß√£o de CLEANUP
  // Vai ser chamada quando o component desmonta (evita memory leak)
  return () => {
    console.log('[SW] üõë Limpando listeners de update');
    clearInterval(interval);
    navigator.serviceWorker?.removeEventListener('controllerchange', updateListener);
  };
}

// ============================================
// 3Ô∏è‚É£ FUN√á√ÉO AUXILIAR - Unregistar SW
// ============================================
// √ötil para testes ou quando quiser desabilitar o SW
export async function unregisterServiceWorker(): Promise<void> {
  if (!navigator.serviceWorker) {
    console.warn('[SW] ‚ö†Ô∏è Service Worker n√£o suportado');
    return;
  }

  try {
    // Listar todas as registra√ß√µes do SW
    const registrations = await navigator.serviceWorker.getRegistrations();

    for (const registration of registrations) {
      // Unregistar cada uma
      await registration.unregister();
      console.log('[SW] ‚úÖ Unregistrado:', registration);
    }
  } catch (error) {
    console.error('[SW] ‚ùå Erro ao unregistar:', error);
  }
}

// ============================================
// 4Ô∏è‚É£ FUN√á√ÉO AUXILIAR - Limpar Cache
// ============================================
// √ötil para testes ou quando quer resetar o app
export async function clearAllCaches(): Promise<void> {
  try {
    // Listar todos os caches
    const cacheNames = await caches.keys();

    // Deletar cada um
    await Promise.all(
      cacheNames.map(cacheName => {
        console.log(`[Cache] üóëÔ∏è Deletando cache: ${cacheName}`);
        return caches.delete(cacheName);
      })
    );

    console.log('[Cache] ‚úÖ Todos os caches deletados');
  } catch (error) {
    console.error('[Cache] ‚ùå Erro ao limpar caches:', error);
  }
}